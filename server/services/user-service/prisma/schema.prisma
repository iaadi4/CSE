// Prisma schema
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  password_hash String
  role          String   @default("investor")
  created_at    DateTime @default(now())

  user_wallets         user_wallets[]
  user_balances        user_balances[]
  transactions         transactions[]
  creator_profile      creator_profiles?
  creator_applications creator_applications[]
  creator_documents    creator_documents[]
  creator_social_links creator_social_links[]
  verification_logs    verification_logs[]
  refresh_token        String?

  @@map("users")
}

model user_wallets {
  id             String   @id @default(uuid())
  user_id        String
  wallet_address String   @unique
  is_active      Boolean  @default(false)
  created_at     DateTime @default(now())

  user          users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_balances user_balances[]
  transactions  transactions[]

  @@index([user_id])
  @@map("user_wallets")
}

model user_balances {
  id             String   @id @default(uuid())
  user_id        String
  wallet_id      String
  currency       String
  balance        Decimal  @default(0) @db.Decimal(18, 9)
  locked_balance Decimal  @default(0) @db.Decimal(18, 9)
  updated_at     DateTime @default(now())

  user   users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  wallet user_wallets @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  @@unique([user_id, wallet_id, currency])
  @@index([user_id])
  @@index([wallet_id])
  @@map("user_balances")
}

model transactions {
  id           String   @id @default(uuid())
  user_id      String
  wallet_id    String
  type         String
  currency     String
  amount       Decimal  @db.Decimal(18, 9)
  tx_signature String?
  created_at   DateTime @default(now())

  user   users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  wallet user_wallets @relation(fields: [wallet_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([wallet_id])
  @@map("transactions")
}

// Creator Onboarding Models

model creator_profiles {
  id                 String   @id @default(uuid())
  user_id            String   @unique
  // Basic Information
  full_name          String
  phone_number       String?
  // Creator Profile
  creator_handle     String   @unique // Stage name / public handle
  bio                String   @db.Text // Max 500 chars enforced at app level
  profile_picture    String? // URL to uploaded image
  category           String // Musician, Influencer, Artist, Filmmaker, Gamer, Other
  custom_category    String? // If category is "Other"
  // Influence Metrics
  engagement_metrics String?  @db.Text // Optional engagement stats
  // Token Details
  token_name         String // e.g., "JANE"
  token_symbol       String   @unique // 3-10 characters
  ico_supply         Decimal  @db.Decimal(18, 2) // Total tokens for ICO
  funding_goal       Decimal? @db.Decimal(18, 2) // Optional funding target in USDC
  token_pitch        String   @db.Text // Max 1000 chars enforced at app level
  // System fields
  status             String   @default("inactive") // "inactive" | "active"
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([creator_handle])
  @@index([token_symbol])
  @@map("creator_profiles")
}

model creator_applications {
  id                         String    @id @default(uuid())
  user_id                    String
  state                      String    @default("pending_submission") // "pending_submission" | "under_review" | "kyc_pending" | "approved" | "rejected"
  rejection_reason           String?   @db.Text
  content_ownership_declared Boolean   @default(false) // Checkbox confirmation
  submitted_at               DateTime  @default(now())
  reviewed_at                DateTime?
  approved_at                DateTime?

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([state])
  @@map("creator_applications")
}

model creator_documents {
  id         String   @id @default(uuid()) 
  user_id    String
  type       String // "government_id" | "tax" | "residence" | "other"
  file_url   String
  status     String   @default("pending") // "pending" | "verified" | "rejected"
  notes      String?  @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([status])
  @@map("creator_documents")
}

model creator_social_links {
  id             String   @id @default(uuid())
  user_id        String
  platform       String // "youtube" | "tiktok" | "instagram" | "twitter" | "other"
  handle         String
  url            String
  follower_count Int? // Optional follower/subscriber count
  verified       Boolean  @default(false)
  created_at     DateTime @default(now())

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("creator_social_links")
}

model verification_logs {
  id         String   @id @default(uuid())
  user_id    String
  action     String // "application_submitted" | "state_changed" | "document_uploaded" | "profile_updated" | etc.
  actor      String // "system" | "admin" | user_id
  metadata   Json? // JSON blob for additional context
  created_at DateTime @default(now())

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([created_at])
  @@map("verification_logs")
}
